name: Zenodo Dataset Draft with DOI Reservation

on:
  workflow_dispatch:

jobs:
  manage-zenodo-record:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Neue Version des Datensatzes anlegen
      run: |
        
        # Setzung der Umgebungsvariablen
        echo "LAST_RECORD_ID=$(jq -r '.id' Metadaten/new_zenodo.json)" >> $GITHUB_ENV
        echo "PUBLICATION_DATE=$(TZ="Europe/Berlin" date "+%Y-%m-%d")" >> $GITHUB_ENV
        echo "PUBLICATION_TIME=$(TZ="Europe/Berlin" date "+%Y-%m-%dT%H:%M:%S%:z")" >> $GITHUB_ENV
        echo "DATENSTAND=$(jq -r '.metadata.dates[0].date | split("T")[0]' Metadaten/new_zenodo.json)" >> $GITHUB_ENV
        echo "DATENSTAND_TIME=$(jq -r '.metadata.dates[0].date' Metadaten/new_zenodo.jso" >> $GITHUB_ENV
        
        if [ "$LAST_RECORD_ID" == "null" ] || [ -z "$LAST_RECORD_ID" ]; then
            # Wenn keine Record ID vorhanden ist, wird ein neuen Datensatz angelegt und die Metadaten gespeichert
            echo "Keine Record ID: $LAST_RECORD_ID"
            response=$(curl -H "Content-Type: application/json" \
                           -H "Authorization: Bearer ${{ secrets.ZENODO_TOKEN }}" \
                           -X POST \
                           -d @Metadaten/new_zenodo.json \
                           "https://zenodo.org/api/records")
        else
            # Wenn eine Record ID vorhanden ist, wird eine neue Version des Datensatzes angelegt und die Metadaten gespeichert
            echo "Record ID: $LAST_RECORD_ID"
            response=$(curl -H "Content-Type: application/json" \
                           -H "Authorization: Bearer ${{ secrets.ZENODO_TOKEN }}" \
                           -X POST \
                           "https://zenodo.org/api/records/$LAST_RECORD_ID/versions")
        fi
        
        # Weitergabe der Variablen in die Umgebung
        echo "NEW_RECORD_ID=$(echo "$response" |jq -r '.id' )" >> $GITHUB_ENV
        echo "$RESPONSE" | jq -r '.' > Metadaten/new_zenodo.json
                 
    - name: Update der Metadaten
      run: | 
      
        # Metadaten Dateien in den Publikationsdatum, Datenstand und DOI ersetzt werden müssen
        dateien=(
            "Metadaten/govdata.ttl" \
            "Metadaten/nfdi4health.json" \
            "Metadaten/new_zenodo.json" \
            "citation.cff" \
            "Readme.md")
        
        # Suchen und Ersetzen Metadaten in den Datein        
        for datei in "${dateien[@]}"; do
            if [ -f "$datei" ]; then
                # Mapping Publikationsdatum
                sed -i 's|"publication_date": ".*"|"publication_date": "'"$PUBLICATION_DATE"'"|g' "$datei"     # Publikationsdatum zenodo.json
                sed -i "s|date-released: '.*'|date-released: \'$PUBLICATION_DATE\'|g" "$datei"                 # Publikationsdatum citation.cff
                sed -i 's|dct:issued ".*"|dct:issued "'"$PUBLICATION_TIME"'"|g' "$datei"                       # Publikationsdatum govdata.ttl
                sed -i 's|"last_update_timestamp": ".*"|"last_update_timestamp": "'"$PUBLICATION_TIME"'"|g'    # Publikationsdatum nfdi4health.json
                # Mapping Datenstand  
                sed -i 's|"version": ".*"|"version": "'"$DATENSTAND"'"|g' "$datei"                             # Datenstand zenodo.json
                sed -i "s|version: '.*'|version: \'$DATENSTAND\'|g" "$datei"                                   # Datenstand citation.cff
                sed -i 's|dct:modified ".*"|dct:modified "'"$DATENSTAND_TIME"'"|g' "$datei"                    # Datenstand govdata.ttl
                sed -i 's|"resource_version": ".*"|"resource_version": "'"$DATENSTAND_TIME"'"|g' "$datei"      # Datenstand nfid4health.json
                # Mapping DOIs
                sed -i 's|10.5281/zenodo.$LAST_RECORD_ID|10.5281/zenodo.'"$NEW_RECORD_ID"'|g' "$datei"         # DOI Aktuallisierung allgemein
                sed -i 's|Currently/no/DOI/available|10.5281/zenodo.'"$NEW_RECORD_ID"'|g' "$datei"             # DOI Aktuallisierung wenn: Currently/no/DOI/available
           fi
        done

    - name: Fixing Zenodo API Bug, hinzufügen des Datenstandes
      run: jq --arg dateValue "$DATENSTAND_TIME" '.metadata.dates[0] += {"date": $dateValue}' Metadaten/new_zenodo.json > Metadaten/new_zenodo.json
      
    - name: Erzeugung der Dokumentations HTML
      uses: jaywcjlove/markdown-to-html-cli@main
      with:
        source: Readme.md
        output: Dokumentation]_$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}' | tr "_" " ").html
        corners: false 
    
    - name: Add and Commit Changes 
      uses: EndBug/add-and-commit@v9
      with:
        message: 'Update Metadata'
        author_name: 'RKIOpenData'
