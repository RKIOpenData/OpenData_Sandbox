name: Zenodo Dataset Draft with DOI Reservation

on:
  workflow_dispatch:

jobs:
  manage-zenodo-record:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Neue Version des Datensatzes anlegen
      run: |
        
        # Setzung der Publikations-Metadaten 
        echo "LAST_RECORD_ID=$(jq -r '.id' Metadaten/zenodo_new.json)" >> $GITHUB_ENV
        echo "PUBLICATION_DATE=$(TZ="Europe/Berlin" date "+%Y-%m-%d")" >> $GITHUB_ENV
        echo "PUBLICATION_TIME=$(TZ="Europe/Berlin" date "+%Y-%m-%dT%H:%M:%S%:z")" >> $GITHUB_ENV
        Datenstand=$(jq -r '.metadata.dates[0].date | split("T")[0]' Metadaten/zenodo_new.json) && echo "DATENSTAND=$Datenstand" >> $GITHUB_ENV
        DatenstandTime=$(jq -r '.metadata.dates[0].date' Metadaten/zenodo_new.json) && echo "DATENSTAND_TIME=$DatenstandTime" >> $GITHUB_ENV

        if [ "$LAST_RECORD_ID" == "null" ] || [ -z "$LAST_RECORD_ID" ]; then
            # Wenn keine Record ID vorhanden ist, wird ein neuen Datensatz angelegt und die Metadaten gespeichert
            echo "Keine Record ID: $LAST_RECORD_ID"
            response=$(curl -H "Content-Type: application/json" \
                           -H "Authorization: Bearer ${{ secrets.ZENODO_TOKEN }}" \
                           -X POST \
                           -d @Metadaten/zenodo_new.json \
                           "https://zenodo.org/api/records")
            echo "$response" | jq -r '.' 
        else
            # Wenn eine Record ID vorhanden ist, wird eine neue Version des Datensatzes angelegt und die Metadaten gespeichert
            echo "Record ID: $LAST_RECORD_ID"
            response=$(curl -H "Content-Type: application/json" \
                           -H "Authorization: Bearer ${{ secrets.ZENODO_TOKEN }}" \
                           -X POST \
                           "https://zenodo.org/api/records/$LAST_RECORD_ID/versions")
            echo "$response" | jq -r '.' 
        fi
        
        # Weitergabe der Variablen in die Umgebung
        echo "NEW_RECORD_ID=$(echo "$response" |jq -r '.id' )" >> $GITHUB_ENV
        echo "$response" | jq -r '.' > Metadaten/zenodo_new.json
                 
    - name: Update der Metadaten
      run: | 
      
        # Metadaten Dateien in den Publikationsdatum, Datenstand und DOI ersetzt werden müssen
        dateien=(
            "Metadaten/govdata.ttl" \
            "Metadaten/nfdi4health.json" \
            "Metadaten/zenodo_new.json" \
            "citation.cff" \
            "Readme.md")
        
        # Suchen und Ersetzen Metadaten in den Datein        
        for datei in "${dateien[@]}"; do
            if [ -f "$datei" ]; then
                # Mapping Publikationsdatum
                sed -i 's|"publication_date": ".*"|"publication_date": "'"$PUBLICATION_DATE"'"|g' "$datei"               # Publikationsdatum zenodo.json
                sed -i "s|date-released: '.*'|date-released: \'$PUBLICATION_DATE\'|g" "$datei"                           # Publikationsdatum citation.cff
                sed -i 's|dct:issued ".*"|dct:issued "'"$PUBLICATION_TIME"'"|g' "$datei"                                 # Publikationsdatum govdata.ttl
                sed -i 's|"last_update_timestamp": ".*"|"last_update_timestamp": "'"$PUBLICATION_TIME"'"|g' "$datei"     # Publikationsdatum nfdi4health.json
                # Mapping Datenstand  
                sed -i 's|"version": ".*"|"version": "'"$DATENSTAND"'"|g' "$datei"                                       # Datenstand zenodo.json
                sed -i "s|version: '.*'|version: \'$DATENSTAND\'|g" "$datei"                                             # Datenstand citation.cff
                sed -i 's|dct:modified ".*"|dct:modified "'"$DATENSTAND_TIME"'"|g' "$datei"                              # Datenstand govdata.ttl
                sed -i 's|"resource_version": ".*"|"resource_version": "'"$DATENSTAND_TIME"'"|g' "$datei"                # Datenstand nfid4health.json
                # Mapping DOIs
                sed -i 's|10.5281/zenodo.$LAST_RECORD_ID|10.5281/zenodo.'"$NEW_RECORD_ID"'|g' "$datei"                   # DOI Aktuallisierung allgemein
                sed -i 's|Currently/no/DOI/available|10.5281/zenodo.'"$NEW_RECORD_ID"'|g' "$datei"                       # DOI Aktuallisierung wenn: Currently/no/DOI/available
           fi
        done

    - name: Fixing Zenodo API Bug, hinzufügen des Datenstandes
      run: | 
        jq --arg dateValue "$DATENSTAND_TIME" '.metadata.dates[0].date = $dateValue' Metadaten/zenodo_new.json > temp.json && mv temp.json Metadaten/zenodo_new.json
      
    - name: Erzeugung der Dokumentations HTML und Umbennung
      uses: jaywcjlove/markdown-to-html-cli@main
      with:
        source: Readme.md
        output: Readme.html
        corners: false 
        favicon: data:image/svg+xml,<svg xmlns=.github/pictures/robert_koch_insitute_helix.svg viewBox=%220 0 100 100%22><text>Datensatzdokumentation $(jq -r '.metadata.title' Metadaten/zenodo_new.json)</text>"</svg>
 
    - name: Upload Files to Zenodo
      run: |
      
        # Umbennung der Readme.html Erstellung der Metadaten.zip  
        mv Readme.html "[Dokumentation]_$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}').html"
        zip -r Metadaten.zip Metadaten
        
        # Definieren der Upload Dateien
        UPLOAD_FILES=(
            "Sandbox_Data.tsv" 
            "[Dokumentation]_Sandbox_Data.html"
            "Metadaten.zip"
            )

        for FILE in "${UPLOAD_FILES[@]}"; do
            # File anlegen
            echo "Upload von $FILE"
            FILE_ENCODED=${FILE/'['/'%5B'} && FILE_ENCODED=${FILE/']'/'%5D'}
            response=$(curl -H "Content-Type: application/json" \
                            -H "Authorization: Bearer ${{ secrets.ZENODO_TOKEN }}" \
                            -X POST \
                            -d '[{"key": "'"$FILE_ENCODED"'"}]' \
                            "https://zenodo.org/api/records/$NEW_RECORD_ID/draft/files")
            echo "$response" | jq -r '.' 
            # File hochladen 
            response=$(curl -H "Content-Type: application/octet-stream" \
                            -H "Authorization: Bearer ${{ secrets.ZENODO_TOKEN }}" \
                            -X PUT \
                            --upload-file $FILE \
                            "https://zenodo.org/api/records/$NEW_RECORD_ID/draft/files/$FILE_ENCODED/content")
            echo "$response" | jq -r '.'                   
            # File commiten
            response=$(curl -H "Authorization: Bearer ${{ secrets.ZENODO_TOKEN }}" \
                            -X POST \
                            "https://zenodo.org/api/records/$NEW_RECORD_ID/draft/files/$FILE_ENCODED/commit")
            echo "$response" | jq -r '.'
        done
    
    - name: Add and Commit Changes 
      uses: EndBug/add-and-commit@v9
      with:
        message: 'Update Metadata'
        author_name: 'RKIOpenData'
